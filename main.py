import streamlit as st
import numpy as np
import pandas as pd
import warnings
from ml.models.exponential_smoothing.model import Forecast
from ml.data_prepare import data_preprocessing
from scripts.utils import to_excel, checkbox_container
import locale

st.set_page_config(layout="wide",
                   page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤"
                   )


locale.setlocale(locale.LC_ALL, "")

warnings.filterwarnings('ignore')

st.write(""" 
         # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
""")

st.sidebar.header('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')

uploaded_file = st.sidebar.file_uploader("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type='xlsx')

if uploaded_file:
    result = None
    df_old = pd.read_excel(uploaded_file)
    df_old = df_old.set_index('Unnamed: 0')
    df_old = df_old.transpose()
    df_old.reset_index(inplace=True)
    df_old = df_old.rename(columns={'index': '–î–∞—Ç–∞'})
    df_old['–î–∞—Ç–∞'] = pd.to_datetime(df_old['–î–∞—Ç–∞'], format='%Y-%m')

    st.subheader('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
    st.write(df_old)

    def get_selected_checkboxes():
        return [i.replace('dynamic_checkbox_', '') for i in st.session_state.keys() if
            i.startswith('dynamic_checkbox_') and st.session_state[i]]

    with st.form("forecast_form"):
        st.header("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
        FORECAST_PERIOD = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ –≤–ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', (1, 2, 3, 4))

        checkbox_container(df_old.columns[1:])
        new_data = get_selected_checkboxes()
        new_data.insert(0, "–î–∞—Ç–∞")
        sel_df=data_preprocessing(df_old,list(df_old.columns)[1:])
        sel_df=sel_df.T
        sel_df.reset_index(inplace = True)
        sel_df=sel_df.T
        sel_df=sel_df.reset_index(drop = True)
        sel_df=sel_df.set_index(0)
        sel_df=sel_df.T
        sel_df=sel_df.rename(columns={'Y-quart':'–ü—Ä–µ–ø–∞—Ä–∞—Ç'})
        sel_df=sel_df[:-2]
        #sel_df.head(5)
        make_predict_button = st.form_submit_button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")

        if make_predict_button:
            #st.write(sel_df)
            forecast = Forecast(df_old[new_data], FORECAST_PERIOD, 1, len(new_data) - 1)
            result = forecast.predict()
            result=sel_df.merge(result, on='–ü—Ä–µ–ø–∞—Ä–∞—Ç', how='left')
            result = result.loc[((result['–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞'] ==">35%")| (result['–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞'] =="<=35%"))]
            result=result.reset_index()
            result=result.drop(columns='index')

    if result is not None:
        st.subheader('–ü—Ä–æ–≥–Ω–æ–∑')
        st.write(result)
        df_xlsx = to_excel(result)
        st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel',
                           data=df_xlsx,
                           file_name='Prediction.xlsx')
